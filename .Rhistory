if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ArrayExpress")
browseVignettes("ArrayExpress")
rawset = ArrayExpress("5500994173212120213068_A01")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ArrayExpress")
source("http://bioconductor.org/biocLite.R")
biocLite()
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()
BiocManager::valid()
BiocManager::version()
BiocManager::install("ArrayExpress")
rawset = ArrayExpress("5500994173212120213068_A01")
browseVignettes("ArrayExpress")
rawset = try(ArrayExpress("5500994173212120213068_A01"))
BiocManager::install("ArrayExpress")
BiocManager::install("ArrayExpress")
rawset = ArrayExpress("5500994173212120213068_A01")
BiocManager::install("ArrayExpress")
BiocManager::install("ArrayExpress")
BiocManager::install("ArrayExpress")
BiocManager::install("ArrayExpress")
BiocManager::install("ArrayExpress")
BiocManager::install("ArrayExpress")
BiocManager::install("ArrayExpress")
BiocManager::install("ArrayExpress")
rawset = ArrayExpress("5500994173212120213068_A01")
BiocManager::install("ArrayExpress")
rawset = ArrayExpress("5500994173212120213068_A01")
> library("ArrayExpress")
library("ArrayExpress")
sets = queryAE(keywords = "pneumonia", species = "homo+sapiens")
installed.packages("dplyr")
library("ArrayExpress")
install.packages("rlang")
library("ArrayExpress")
install.packages("digest")
library("ArrayExpress")
library("ArrayExpress")
install.packages("digest")
install.packages("digest", dependencies = TRUE)
install.packages("digest", dependencies = TRUE)
library("ArrayExpress")
sets = queryAE(keywords = "pneumonia", species = "homo+sapiens")
View(sets)
View(sets)
library(BridgeDbR)
getProperties()
location <- getDatabase('Homo Sapiens')
mapper <- loadDatabase(location)
location <- getDatabase('Homo Sapiens')
location <- getDatabase('Homo sapiens')
options(timeout=300)
location <- getDatabase('Homo sapiens')
mapper <- loadDatabase(location)
getProperties(mapper)
getProperties(mapper)
?getProperties
a = getProperties(mapper)
a
?loadDatabase
mapper
mapper.getCapabilities()
mapper$getCapabilities()
library("BridgeDbR")
citation("BridgeDbR")
setwd("~/Google Drive/Serious/Uni/Msc/MRP1/ComMet")
library(amanpg)
cov <- read.table('model/cov_free_con.csv', header=FALSE)
```{r}
cov <- read.table('model/cov_free_con.csv', header=FALSE)
library(amanpg)
cov <- read.table('model/cov_free_con.csv', header=FALSE)
cov
library(amanpg)
cov <- read.table('model/cov_free_con.csv', header=FALSE)
cov
lambda1 <- 0.1 * matrix(data=1, nrow=4, ncol=1)
amanpg::spca.amanpg(cov_free_con, lambda1, Inf, type=1)
lambda1 <- 0.1 * matrix(data=1, nrow=4, ncol=1)
amanpg::spca.amanpg(cov, lambda1, Inf, type=1)
library(amanpg)
cov <- read.csv('model/cov_free_con.csv', header=FALSE)
cov
lambda1 <- 0.1 * matrix(data=1, nrow=4, ncol=1)
amanpg::spca.amanpg(cov, lambda1, Inf, type=1)
dim(cov)
dim(cov)[0]
dim(cov)(0)
dim(cov)[1]
lambda1 <- 0.1 * matrix(data=1, nrow=dim(cov)[1], ncol=1)
amanpg::spca.amanpg(cov, lambda1, Inf, type=1)
lambda1 <- 0.1 * matrix(data=1, nrow=dim(cov)[1], ncol=1)
amanpg::spca.amanpg(cov, lambda1, Inf, type=1, k=1)
lambda1 <- 0.1 * matrix(data=1, nrow=dim(cov)[1], ncol=1)
result = amanpg::spca.amanpg(cov, lambda1, Inf, type=1, k=1)
save(result, file="adipo_con.RData")
load("adipo_con.RData")
View(result)
library(amanpg)
cov_con <- read.csv('model/adipo_cov_con.csv', header=FALSE)
cov_un <- read.csv('model/adipo_cov_un.csv', header=FALSE)
cov_con
lambda1 <- 0.1 * matrix(data=1, nrow=dim(cov_con)[1], ncol=1)
result = amanpg::spca.amanpg(cov_con, lambda1, Inf, type=1, k=1)
lambda1 <- 0.1 * matrix(data=1, nrow=dim(cov_con)[1], ncol=1)
result = amanpg::spca.amanpg(cov_con, lambda1, Inf, type=1)
cov_un <- read.csv('model/cov_free_un_ecoli.csv', header=FALSE)
cov_con
result = amanpg::spca.amanpg(cov_con, lambda1, Inf, type=1)
library(amanpg)
library(amanpg)
cov_con <- read.csv('model/cov_free_con_ecoli.csv', header=FALSE)
cov_un <- read.csv('model/cov_free_un_ecoli.csv', header=FALSE)
cov_con
lambda1 <- 0.1 * matrix(data=1, nrow=dim(cov_con)[1], ncol=1)
result = amanpg::spca.amanpg(cov_con, lambda1, Inf, type=1)
save(result, file="ecoli_con.RData")
lambda1 <- 0.1 * matrix(data=1, nrow=dim(cov_con)[1], ncol=1)
result_con = amanpg::spca.amanpg(cov_con, lambda1, Inf, type=1)
save(result_con, file="ecoli_con.RData")
result_un
lambda1 <- 0.1 * matrix(data=1, nrow=dim(cov_un)[1], ncol=1)
result_un = amanpg::spca.amanpg(cov_un, lambda1, Inf, type=1)
save(result_un, file="ecoli_un.RData")
result_un
result_un[3]
result_un
result_un[4]
result_un[5]
result_un[5][0]
result_un[5][1]
result_un[5][1][0]
result_un[5][1][1]
dim(result_un[5][1][1])
dim(result_un[5][1])
dim(result_un[5])
type(result_un[5])
typeof(result_un[5])
dim(result_un[5]
dim(result_un[5])
dim(result_un[5])
result_un[5]
result_un[5]$x
result_un[5]$x[1]
dim(result_un[5]$x)
result_un[5]$x
result_un[6]
result_un[6]$loadings
result_un[6]$loadings[0,:]
result_un[6]$loadings[1,:]
dim(result_un[6]$loadings)
result_un[6]$loadings[0]
result_un[6]$loadings[1]
result_un[6]$loadings[2]
result_un[6]$loadings!=0
result_un[6]$loadings[result_un[6]$loadings!=0]
result_un[6]$loadings[0,]
result_un[6]$loadings[1,]
result_un[6]$loadings[,0]
result_un[6]$loadings[,1]
result_con[6]$loadings[,1]
setwd("~/Google Drive/Serious/Uni/Msc/MRP1/ComMet")
library(amanpg)
cov_con <- read.csv('model/cov_free_con_ecoli.csv', header=FALSE)
cov_un <- read.csv('model/cov_free_un_ecoli.csv', header=FALSE)
cov_con
lambda1 <- 0.1 * matrix(data=1, nrow=dim(cov_con)[1], ncol=1)
result_con = amanpg::spca.amanpg(cov_con, lambda1, Inf, type=1)
save(result_con, file="ecoli_con.RData")
lambda1 <- 0.1 * matrix(data=1, nrow=dim(cov_un)[1], ncol=1)
result_un = amanpg::spca.amanpg(cov_un, lambda1, Inf, type=1)
save(result_un, file="ecoli_un.RData")
result_un[6]$loadings[,1]
result_un[6]$loadings
result_un
result_un$x
result_un$x[,86]
write.csv(result_un$loadings, 'un_pcs.csv')
write.csv(result_un$loadings, 'con_pcs.csv')
write.csv(result_un$x, 'un_x.csv')
write.csv(result_un$x, 'con_x.csv')
write.csv(result_un$x, 'un_x.csv')
write.csv(result_con$x, 'con_x.csv')
write.csv(result_un$x, 'un_pcs.csv')
write.csv(result_con$x, 'con_pcs.csv')
install.package("SPCA")
install.packages('elasticnet')
library(amanpg)
library(elasticnet)
cov_con <- read.csv('model/cov_free_con_ecoli.csv', header=FALSE)
cov_un <- read.csv('model/cov_free_un_ecoli.csv', header=FALSE)
result_con = elasticnet::spca(cov_con, dim(cov_con), type="Gram")
result_con = elasticnet::spca(cov_con, dim(cov_con), type="Gram", params=lambda1)
result_con = elasticnet::spca(cov_con, dim(cov_con), type="Gram", param=lambda1)
lambda1 <- 0.1 * matrix(data=1, nrow=dim(cov_con)[1], ncol=1)
result_con = elasticnet::spca(cov_con, dim(cov_con), type="Gram")
lambda1 <- 0.1 * matrix(data=1, nrow=dim(cov_con)[1], ncol=1)
result_con = elasticnet::spca(cov_con, K=dim(cov_con), type="Gram")
lambda1 <- 0.1 * matrix(data=1, nrow=dim(cov_con)[1], ncol=1)
result_con = elasticnet::spca(cov_con, K=dim(cov_con), type="Gram", para=c(lambda1))
lambda1 <- 0.1 * matrix(data=1, nrow=dim(cov_con)[1], ncol=1)
result_con = elasticnet::spca(cov_con, K=dim(cov_con), type="Gram", sparse="penalty", para=c(lambda1))
lambda1 <- 0.1 * matrix(data=1, nrow=dim(cov_con)[1], ncol=1)
result_con = elasticnet::spca(cov_con, K=dim(cov_con), type="Gram", sparse="penalty", para=c(lambda1))
lambda1 <- 0.1 * matrix(data=1, nrow=dim(cov_con)[1], ncol=1)
result_con = elasticnet::spca(cov_con, K=dim(cov_con), type="Gram", sparse="penalty", para=clambda1)
lambda1 <- 0.1 * matrix(data=1, nrow=dim(cov_con)[1], ncol=1)
result_con = elasticnet::spca(cov_con, K=dim(cov_con), type="Gram", sparse="penalty", para=lambda1)
lambda1 <- 0.1 * matrix(data=1, nrow=dim(cov_con)[1], ncol=1)
print(lambda1)
result_con = elasticnet::spca(cov_con, K=dim(cov_con), type="Gram", sparse="penalty", para=lambda1)
lambda1 <- 0.1 * matrix(data=1, nrow=dim(cov_con)[1], ncol=1)
result_con = elasticnet::spca(cov_con, K=dim(cov_con)[1], type="Gram", sparse="penalty", para=lambda1)
result_con
result_con$pev
result_con$loadings
lambda1 <- 0.1 * matrix(data=1, nrow=dim(cov_con)[1], ncol=1)
lambda2 <- 0.1 * matrix(data=1, nrow=dim(cov_un)[1], ncol=1)
result_con = elasticnet::spca(cov_con, K=dim(cov_con)[1], type="Gram", sparse="penalty", para=lambda1)
result_un = elasticnet::spca(cov_un, K=dim(cov_un)[1], type="Gram", sparse="penalty", para=lambda2)
write.csv(result_un$loadings, 'un_pcs_spca.csv')
write.csv(result_con$loadings, 'con_pcs_spca.csv')
write.csv(result_un$pev, 'un_pev_spca.csv')
write.csv(result_con$pev, 'con_pev_spca.csv')
install.packages("amanpg", "elasticnet")
install.packages("amanpg", "elasticnet")
lambda1 <- 0.5 * matrix(data=1, nrow=dim(cov_con)[1], ncol=1)
lambda2 <- 0.5 * matrix(data=1, nrow=dim(cov_un)[1], ncol=1)
result_con = elasticnet::spca(cov_con, K=dim(cov_con)[1], type="Gram", sparse="penalty", para=lambda1)
result_un = elasticnet::spca(cov_un, K=dim(cov_un)[1], type="Gram", sparse="penalty", para=lambda2)
result_con$loadings
result_con$loa
result_con$pev
lambda1 <- 0.01 * matrix(data=1, nrow=dim(cov_con)[1], ncol=1)
lambda2 <- 0.01 * matrix(data=1, nrow=dim(cov_un)[1], ncol=1)
result_con = elasticnet::spca(cov_con, K=dim(cov_con)[1], type="Gram", sparse="penalty", para=lambda1)
result_un = elasticnet::spca(cov_un, K=dim(cov_un)[1], type="Gram", sparse="penalty", para=lambda2)
result_con$pev
result_con$loadings
write.csv(result_un$pev, 'small_penalty_un_pev_spca.csv')
write.csv(result_con$pev, 'small_penalty_con_pev_spca.csv')
write.csv(result_un$loadings, 'small_penalty_un_pcs_spca.csv')
write.csv(result_con$loadings, 'small_penalty_con_pcs_spca.csv')
lambda1 <- 0.5 * matrix(data=1, nrow=dim(cov_con)[1], ncol=1)
lambda2 <- 0.5 * matrix(data=1, nrow=dim(cov_un)[1], ncol=1)
result_con = elasticnet::spca(cov_con, K=dim(cov_con)[1], type="Gram", sparse="penalty", para=lambda1)
result_un = elasticnet::spca(cov_un, K=dim(cov_un)[1], type="Gram", sparse="penalty", para=lambda2)
write.csv(result_un$pev, 'big_penalty_un_pev_spca.csv')
write.csv(result_con$pev, 'big_penalty_con_pev_spca.csv')
write.csv(result_un$loadings, 'big_penalty_un_pcs_spca.csv')
write.csv(result_con$loadings, 'big_penalty_con_pcs_spca.csv')
